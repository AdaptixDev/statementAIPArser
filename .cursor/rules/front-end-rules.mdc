---
description: Useful for building react full stack applications
globs: web/*.{ts,*.tsx,*.ts
alwaysApply: false
---
# Front-End Development Rule Set

These rules must be followed **before** and **throughout** the development of any front-end application to ensure best-practice engineering, mobile-first design, and state-of-the-art technologies.

---

## 1. Mobile-First Design
1. Start by designing and building the smallest screen size first.
2. Use fluid layouts and percentage-based widths to allow for flexible resizing.
3. Implement responsive breakpoints (media queries) to adapt layouts for larger screens.
4. Always test design and interactions on mobile devices before scaling up.

---

## 2. Semantic HTML
1. Use meaningful HTML tags (e.g., `<header>`, `<main>`, `<section>`, `<footer>`) to outline the document structure.
2. Use heading tags (`<h1>`, `<h2>`...) in hierarchical order for readability and SEO.
3. Maintain clean and minimal DOM structures; avoid extra wrapper `<div>` elements.

---

## 3. CSS & Styling Best Practices
1. Use modular and scalable CSS methodologies (e.g., BEM, SMACSS, or utility-first frameworks).
2. Apply minimal custom CSS and rely on widely supported, lightweight frameworks or pre-processors (e.g., Sass, PostCSS) when appropriate.
3. Optimize CSS by removing unused styles and combining files when feasible.
4. Leverage CSS variables (`var(--variable-name)`) for maintaining consistent design tokens (colors, spacing, fonts).

---

## 4. Performance Optimization
1. Compress and minify HTML, CSS, and JavaScript files.
2. Use tree shaking and code splitting to reduce JavaScript bundle sizes.
3. Load scripts asynchronously or defer them where possible (`async`, `defer` attributes).
4. Optimize images (e.g., responsive images with `srcset`, modern formats like WebP, and lazy loading).
5. Implement caching strategies (e.g., HTTP caching headers, Service Workers).

---

## 5. Accessibility (A11y)
1. Include alt text for images and labels for form elements.
2. Ensure all interactive elements are reachable and usable via keyboard navigation.
3. Provide ARIA attributes where necessary but avoid excessive or incorrect ARIA usage.
4. Use high-contrast color schemes for text and backgrounds to increase visibility.
5. Test with screen readers and automated accessibility checkers.

---

## 6. State-of-the-Art Front-End Tools
1. Use modern build tools such as Vite, Webpack, or Parcel to streamline development.
2. Employ modern JavaScript frameworks (React, Vue, Svelte, or Angular) as appropriate.
3. Prefer TypeScript for more robust and maintainable code.
4. Integrate linters (ESLint, Stylelint) and formatters (Prettier) into the workflow.

---

## 7. Testing & Quality Assurance
1. Automate unit tests for reusable components (using Jest, Mocha, or Vitest).
2. Automate integration/end-to-end tests (using Cypress, Playwright, or Selenium).
3. Use visual regression testing tools to ensure UI consistency (e.g., Storybook with Chromatic).
4. Validate forms, user input, and external data sources thoroughly.

---

## 8. Version Control & CI/CD
1. Use Git for version control; maintain a clear branching strategy (e.g., Gitflow, trunk-based).
2. Every commit should be meaningful and follow a conventional commit format where possible.
3. Integrate continuous integration (CI) to run linting, testing, and building on every push or pull request.
4. Utilize continuous delivery/deployment (CD) to automate staging and production deployments.

---

## 9. Security Considerations
1. Use HTTPS for all environments, including development.
2. Implement Content Security Policy (CSP) and other security headers where feasible.
3. Sanitize and validate all user inputs to prevent XSS attacks.
4. Follow best practices for securing third-party integrations and APIs (e.g., OAuth tokens, JWT).

---

## 10. Documentation & Collaboration
1. Document components, functions, and modules (inline comments plus separate documentation).
2. Maintain up-to-date README and contributor guides.
3. Use design systems or style guides to keep the UI consistent.
4. Encourage code reviews and pair programming to foster knowledge sharing and maintain quality.

---

## 11. Scalability & Maintenance
1. Break large apps into smaller, manageable modules or micro front-ends if necessary.
2. Refactor regularly to remove obsolete code and dependencies.
3. Monitor application performance using tools (e.g., Google Lighthouse, browser dev tools).
4. Always keep dependencies up to date and remove unused packages.

---

## 12. Ethical & Inclusive Design
1. Strive for inclusive language, imagery, and user flows.
2. Follow WAI-ARIA and WCAG standards to accommodate diverse user needs.
3. Respect user privacy; prompt for consent where required by data protection laws.
4. Honor user preferences (light/dark mode, accessibility settings).

---

## Final Note
**This rule set must be run before writing any front-end code** to ensure the solution aligns